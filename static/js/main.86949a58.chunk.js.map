{"version":3,"sources":["component/Navbar.js","component/TextBox.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","name","type","id","htmlFor","onClick","toggleScreen","TextBox","useState","text","setText","title","value","onChange","event","target","style","backgroundColor","height","toUpperCase","length","showAlert","toLowerCase","emails","split","forEach","element","validator","isEmail","document","querySelector","select","navigator","clipboard","writeText","trim","replace","toFixed","Alert","alert","class","status","role","mess","App","setmode","setAlert","message","setTimeout","body","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.86949a58.chunk.js","sourcesContent":["//rfc ->react function react\r\nimport React from 'react'\r\n// import PropTypes from 'prop-types'\r\n// import { a } from 'react-router-dom';\r\n\r\n//create function based component with props and export\r\nfunction Navbar(props) {\r\n\r\n  // let color = {mode}.toLowerCase();\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.name}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">About</a>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"form-check form-switch float-end me-5\">\r\n        <label className={`mx-2 ${props.mode} === \"light\" ? 'dark' : 'light'`} htmlFor=\"screenMode\">{(props.mode === \"light\" ? 'Dark' : 'Light')} Mode</label>\r\n        <input className=\"form-check-input m-1\" onClick={props.toggleScreen} type=\"checkbox\" id=\"flexSwitchCheckChecked\" />\r\n      </div>\r\n      </nav>\r\n   \r\n\r\n    </>\r\n  );\r\n}\r\n\r\n//set propType\r\n// Navbar.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   about: PropTypes.string.isRequired\r\n// }\r\n// //set defaultProps\r\n// Navbar.defaultProps = {\r\n//   about: \"About us \"\r\n// }\r\n//exort this func base compo \r\nexport default Navbar;","import React, { useState } from 'react'\r\nimport validator from 'validator'\r\n\r\n\r\nexport default function TextBox(props) {\r\n\t//if you change text value using setText from anywhere then text value will change all the place where you use text attribute  \r\n\tconst [text, setText] = useState(\"\");\r\n\r\n\tconst changeUpperCase = () => {\r\n\t\tsetText(text.toUpperCase());\r\n\t\tif (text.length !== 0)\r\n\t\t\tprops.showAlert(\"success\", \"Successfuly Converted into UpperCase!\");\r\n\t\telse\r\n\t\t\tprops.showAlert(\"danger\", \"Write Something Converted into UpperCase Text!\");\r\n\t}\r\n\tconst changeLowerCase = () => {\r\n\t\tsetText(text.toLowerCase());\r\n\t\tif (text.length !== 0)\r\n\t\t\tprops.showAlert(\"success\", \"Successfuly Converted into LowerCase!\");\r\n\t\telse\r\n\t\t\tprops.showAlert(\"danger\", \"Write Something Converted into LowerCase Text!\");\r\n\t}\r\n\tconst extractEmail = (event) => {\r\n\t\tlet emails = \"\";\r\n\t\ttext.split(\" \").forEach(element => {\r\n\t\t\tif (validator.isEmail(element))\r\n\t\t\t\temails += element + \" \";\r\n\t\t});\r\n\t\t// setText(element)\r\n\t\tsetText(emails);\r\n\t\tif (text.length !== 0)\r\n\t\t\tprops.showAlert(\"success\", \"Successfuly Extract Email Id from text!\");\r\n\t\telse\r\n\t\t\tprops.showAlert(\"danger\", \"Write Something Before Extract Text!\");\r\n\t}\r\n\tconst clearText = () => {\r\n\t\tsetText(\"\");\r\n\t\tif (text.length !== 0)\r\n\t\t\tprops.showAlert(\"success\", \"Successfuly Clear All Text!\");\r\n\t\telse\r\n\t\t\tprops.showAlert(\"danger\", \"Write Something before Clear Text!\");\r\n\t}\r\n\tconst copyText = () => {\r\n\t\tdocument.querySelector(\".textarea\").select();\r\n\t\tnavigator.clipboard.writeText(text);\r\n\t\tif (text.length !== 0)\r\n\t\t\tprops.showAlert(\"success\", \"Successfuly Copied All Text!\");\r\n\t\telse\r\n\t\t\tprops.showAlert(\"danger\", \"Write Something before press Copy Text!\");\r\n\r\n\t}\r\n\tconst onchangeText = (event) => {\r\n\t\tsetText(event.target.value);\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1 className=\"text-center mt-4 textHeading\">{props.title}</h1>\r\n\t\t\t<div className=\"form-floating container\">\r\n\t\t\t\t<textarea htmlFor=\"form\" value={text} onChange={onchangeText} className=\"form-control textarea\" style={{ backgroundColor: \"#dfdfdf\", height: \"9rem\" }}></textarea>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"text-center my-4 btnContainer\">\r\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={changeUpperCase}>UpperCase</button>\r\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={changeLowerCase}>LowerCase</button>\r\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={extractEmail}>Extract Email</button>\r\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={copyText}>Copy Text</button>\r\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={clearText}>Clear Text</button>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"priview container\">\r\n\r\n\t\t\t\t<h3>Your test summary :-</h3>\r\n\r\n\t\t\t\t<p><b>{((text.length === 0) ? 0 : text.trim().split(/\\s+/g).length)}</b> Words and <b>{text.replace(/\\s+/g, \"\").length}</b> Characters</p>\r\n\t\t\t\t<p><b>{(0.03 * ((text.length === 0) ? 0 : text.trim().split(/\\s+/g).length)).toFixed(2)}</b> min to read</p>\r\n\r\n\t\t\t\t<h3>Perview :-</h3>\r\n\t\t\t\t<h6>{text}</h6>\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\treturn (\r\n\r\n\t\tprops.alert && <div class={`alert alert-${props.alert.status} `} role=\"alert\">\r\n\t\t\t<strong>{props.alert.mess}</strong>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n","import \"./App.css\";\nimport Navbar from './component/Navbar'\nimport TextBox from './component/TextBox'\n// import About from './component/About'\nimport Alert from './component/Alert'\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nimport React, { useState } from 'react'\n\n// import { Switch, Route } from \"react-router-dom\";\n\n//jsx is detto similar html but some difference about attribute is \n// html        jsx\n// class       className\n// for         htmlFor\n// tab         tabIndex\n// onchange     onChange\n\n\n//This app func only retrun single element which may be any html tag or <> </> this (jsx)fragment tag \nfunction App() {\n\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleScreenMode = () => {\n    //dark Mode\n    if (mode === 'light') {\n\n      document.body.style.backgroundColor = \"#2c3044\"\n      document.body.style.color = \"white\"\n      setmode(\"dark\");\n      showAlert(\"success\", \"Successfuly Switch to Dark Mode!\");\n    }\n    //light Mode\n    else {\n      document.body.style.backgroundColor = \"white\"\n      document.body.style.color = \"black\"\n      setmode(\"light\");\n      showAlert(\"success\", \"Successfuly Switch to Light Mode!\");\n    }\n\n    // document.querySelector(\".navbar\").classList.add([\"navbar-light\"]);\n  }\n  const showAlert = (value, message) => {\n    setAlert({\n      status: value,\n      mess: message\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  // document.body.style.backgroundColor=\"black\";\n  // document.body.style.color=\"white\";\n  return (\n    <>\n      <Navbar name=\"TextUitiles\" mode={mode} toggleScreen={toggleScreenMode} />\n      <Alert alert={alert}/>\n      <TextBox title=\"Text Analyzer\" showAlert={showAlert} />\n    </>\n    // <Router>\n    //   <Routes>\n    //     {/* //exact attriute is use for exact path (recommanded) */}\n    //     <Route exact path=\"/\" element={<TextBox title=\"Text Analyzer\" showAlert={showAlert} />} />\n    //     <Route exact path=\"/about\" element={<About />} />\n    //   </Routes>\n\n    // </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}